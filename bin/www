#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('OriginalChat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var mongoose = require('mongoose');

var io = require('socket.io').listen(server);

io.sockets.on('connection', function(socket) {
  // 接続のidを確認
  console.log('connected', socket.id);

  // chatというイベントを受信した時
  socket.on('chat', function(chat) {
    console.log('text : ' + chat.text);

    var Chat = mongoose.model('Chat');
    var chatTable = new Chat();
    chatTable.name = chat.name;
    chatTable.text = chat.text;
    chatTable.save();

    // DBのキーを保存して送る
    chat._id = chatTable._id;
    io.emit('chat', chat);
  });

  // toggleChatというイベントを受信した時
  socket.on('toggleChat', function(key) {
    var Chat = mongoose.model('Chat');

    Chat.findOne({_id: key.key}, function(err, chat) {
      chat.isMove = !chat.isMove;
      chat.save();
    });

    io.emit('toggleChat', key);
  });

  // moveChatというイベントを受信した時
  socket.on('moveChat', function(moveChat) {
    var Chat = mongoose.model('Chat');

    Chat.findOne({_id: moveChat.key}, function(err, chat) {
      chat.x = moveChat.x;
      chat.y = moveChat.y;
      chat.save();
    });

    io.emit('moveChat', moveChat);
  });

  // 接続が切断した時
  socket.on('disconnect', function() {
    console.log('disconnect');
  });
});